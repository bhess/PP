package clonedetection.classification;

import clonedetection.results.Results;

/**
 * @author bhess
 *
 */
public class EvidenceWeightedLikelihoodRatio implements CloneClassification {

	public static final String TYPE = "EvidenceWeightedLikelihoodRatio";
	
	public EvidenceWeightedLikelihoodRatio() {
		this.llr = new LikelikoodRatioResults();
		this.ect = new EvidenceCollectionTest();
	}
	
	private LikelikoodRatioResults llr;
	private EvidenceCollectionTest ect;
	
	private double min = Double.MAX_VALUE, max = Double.MIN_VALUE;

	/* (non-Javadoc)
	 * @see clonedetection.classification.CloneClassification#isClone(float, clonedetection.results.Results)
	 */
	@Override
	public double isClone(float pmr, Results results) {
		double res = llr.isClone(pmr, results) * ect.isClone(pmr, results);
		if (res < min) min = res;
		if (res > max) max = res;
		return res;
	}

	/* (non-Javadoc)
	 * @see clonedetection.classification.CloneClassification#isClone(double, double)
	 */
	@Override
	public boolean isClone(double threshold, double isClone) {
		return threshold <= isClone;
	}
	
	/* (non-Javadoc)
	 * @see clonedetection.classification.CloneClassification#getMaxThreshold()
	 */
	@Override
	public double getMaxThreshold() {
		return max;
	}

	/* (non-Javadoc)
	 * @see clonedetection.classification.CloneClassification#getMinThreshold()
	 */
	@Override
	public double getMinThreshold() {
		return min;
	}

	/* (non-Javadoc)
	 * @see clonedetection.classification.CloneClassification#getMode()
	 */
	@Override
	public int getMode() {
		return LESS_OR_EQUAL;
	}

	/* (non-Javadoc)
	 * @see clonedetection.classification.CloneClassification#getName()
	 */
	@Override
	public String getName() {
		return TYPE;
	}

}
