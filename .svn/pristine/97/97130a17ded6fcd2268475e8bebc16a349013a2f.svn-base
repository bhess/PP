package clonedetection.results;

import java.io.Serializable;
import java.util.List;

/**
 * 
 * @author bhess
 * 
 * Class representing a trace of one specific tag
 *
 */
public class Results implements Cloneable, Serializable {
	
	private static final long serialVersionUID = -4813520772875505187L;

	/**
	 * Initializing with unique ID and the trace size
	 * @param id
	 * Unuque ID of a tag
	 * @param size
	 * Size of the corresponding trace
	 */
	public Results(int id, int size) {
		if (size == 0) System.out.println("size of result is 0");
		this.id = id;
		this.size = size;
		this.clone = false;
		clonePerfectFit = -1;
		cloneMisread = -1;
		clonePerfectFitAndMisread = -1;
		cloneTotalLength = -1;
		clonePerfectFitWithoutMisread = -1;
		overhang = 0;
	}
	
	/**
	 * The unique Tag ID
	 */
	public int id;
	
	/**
	 * The trace size
	 */
	public int size;
	
	/**
	 * The checked results
	 * 
	 * This is not implemented directly here because of decoupling
	 * simulation and detection. So the simulator can first for example
	 * serialize the tag traces and in the detection step the rule checks
	 * are done. 
	 */
	private CheckedResults checkedResults = null;
	
	/**
	 * adding a trace list (IN-...OUT-.....)
	 * @param traceList
	 */
	public void putTraceList(List<String> traceList) {
		trace = traceList.toArray(new String[size]);
	}
	
	/**
	 * Adding a location list corresponding to the trace list
	 * @param locationsList
	 */
	public void putLocations(List<String> locationsList) {
		location = locationsList.toArray(new String[size]);
	}
	
	/**
	 * Verifying the rules if this is not already done
	 * 
	 * Should be called not before storing or serializing the
	 * results
	 */
	public void checkResults() {
		if (checkedResults == null) {
			checkedResults = new CheckedResults(this);
		}
	}
	
	/**
	 * Outputs the Verified results
	 * 
	 * checkResults() has to be called before!
	 * 
	 * @return
	 * The verifiedResults
	 */
	public CheckedResults getCheckedResults() {
		return checkedResults;
	}
	
	/**
	 * the trace and the locations
	 */
	public String[] trace, location;
	
	/**
	 * Data not accessible to the classifier...
	 * Cloned Trace can be:
	 * - perfect fit
	 * - misread
	 * - perfect fit and misread
	 * 
	 * if no clone -> all -1
	 */
	public int clonePerfectFit, cloneMisread, clonePerfectFitAndMisread, cloneTotalLength;
	public boolean clone;
	public int overhang;
	
	public int clonePerfectFitWithoutMisread;

}