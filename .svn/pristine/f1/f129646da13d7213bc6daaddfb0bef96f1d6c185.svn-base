package userinterface;

import java.io.File;
import java.io.FilenameFilter;

/**
 * @author bhess
 * 
 * Console User Interface for the simulator
 * (View in the MVC pattern)
 */
public class ConsoleUI implements SimulationView {

	/**
	 * @param controller
	 * Controller for the simulations
	 * @param dirPath
	 * Path for the simulation data
	 * @param autostart
	 * should the simulation be started non-interactively
	 * @param detectionOnly
	 * should there be detection only (no simulation)
	 */
	public ConsoleUI(SimulationController controller, String dirPath, 
			boolean autostart, boolean detectionOnly) {
		System.out.println();
		if (detectionOnly) {
			System.out.println("Suply chain clone detection");
			System.out.println("---------------------------");
		} else {
			System.out.println("Supply chain simulator");
			System.out.println("----------------------");
		}
		System.out.println();
		
		this.controller = controller;
		this.autostart = autostart;
		this.detectionOnly = detectionOnly;
		this.dirPath = dirPath;

	}
	
	private boolean autostart, detectionOnly;
	private String dirPath;
	
	private SimulationController controller;
	private int totalRuns;
	
	/**
	 * starting simulation/detection
	 */
	public void start() {
		initFiles(dirPath, detectionOnly);
		if (autostart) {
			//System.out.println("Starting simulations...");
			controller.startSimulations();
		}
		if (detectionOnly) {
			//System.out.println("Starting Detection...");
			controller.startDetectionOnly();
		}
	}
	
	/**
	 * initiates the files from the given string
	 * @param path
	 */
	private void initFiles(String path, boolean detectionOnly) {
		if (detectionOnly) {
			FilenameFilter ff = new FilenameFilter() {
				public boolean accept(File dir, String name) {
					return name.endsWith(".ser.gz");
				}
			};
			File dir = new File(path);
			File[] files = (dir.isDirectory() ? dir.listFiles(ff) : new File[]{dir} );
			controller.setFiles(files, true, true);
			
			System.out.println(files.length + " Files loaded:");
			for (File f : files) {
				System.out.println(f.getName());
			}
			System.out.println();
		} else {
			FilenameFilter ff = new FilenameFilter() {
				public boolean accept(File dir, String name) {
					if (!name.endsWith(".xml")) return false;
					if (!SimulatorMain.SERIALIZE) return true;
					String n = name.replace(".xml", "");
					return !(new File(SimulatorMain.SERIALIZE_PATH + "/" + n + ".ser.gz").exists());
					
				}
			};
			File dir = new File(path);
			File[] files = (dir.isDirectory() ? dir.listFiles(ff)
					: new File[]{dir} );
			controller.setFiles(files, true, false);
			
			System.out.println(files.length + " Files loaded:");
			for (File f : files) {
				System.out.println(f.getName());
			}
			System.out.println();
		
			this.totalRuns = controller.getNumConfigurations() * controller.getNumRepetitions();
		}
	}
	
	/* (non-Javadoc)
	 * @see userinterface.SimulationView#log(java.lang.String)
	 */
	public void log(String info) {
		System.out.println(info);
	}

	/* (non-Javadoc)
	 * @see userinterface.SimulationView#log(java.lang.String, int)
	 */
	public void log(String info, int thread) {
		// TODO Auto-generated method stub

	}

	/* (non-Javadoc)
	 * @see userinterface.SimulationView#notifySimulationsDone()
	 */
	public void notifySimulationsDone() {
		System.out.println();
		System.out.println("Simulations completed!");
	}
	
	public void notifyDetectionsDone() {
		System.out.println();
		System.out.println("Detections completed!");
	}

	/* (non-Javadoc)
	 * @see userinterface.SimulationView#setMinMaxProgress(int, int, int)
	 */
	public void setMinMaxProgress(int min, int max, int thread) {
		// TODO Auto-generated method stub

	}

	/* (non-Javadoc)
	 * @see userinterface.SimulationView#setProgress(int, int)
	 */
	public void setProgress(int progress, int thread) {
		// TODO Auto-generated method stub

	}

	/* (non-Javadoc)
	 * @see userinterface.SimulationView#setTotalProgress(int)
	 */
	public void setTotalProgress(int progress) {
		int percentage = (int)((100d * (double)progress) / (double)totalRuns);
		StringBuilder sb = new StringBuilder();
		int i = 0;
		for (; i < percentage / 2; ++i) {
			sb.append('#');
		}
		for (; i < 50; ++i) {
			sb.append(' ');
		}
		
		System.out.print("\r" + percentage + "% " + progress + "/" + totalRuns + " [" + sb + "]");
	}

	/* (non-Javadoc)
	 * @see userinterface.SimulationView#detectionStarted()
	 */
	public void notifyDetectionStarted() {
		System.out.println();
		System.out.println("Detection started...");
	}

	@Override
	public void notifySimulationsStarted() {
		System.out.println("Using " + controller.getNumThreads() + " threads");
		System.out.println(controller.getNumRepetitions() + " repetitions per config");
		System.out.println();
		setTotalProgress(0);
	}

}
