/**
 * 
 */
package simulation;

import java.util.EventObject;

import simulation.entities.DirectedChannel;
import simulation.entities.Recipient;

/**
 * @author bhess
 *
 * Class representing a read event
 */
public abstract class ReadEvent extends EventObject {

	private static final long serialVersionUID = -737969332990929532L;
	
	/**
	 * Initializing with a source and a channel
	 * @param source
	 * @param d
	 */
	public ReadEvent(Object source, DirectedChannel d) {
		super(source);
		readChannel = d;
		
		// sets whether event is misread or not
		Recipient r = (Recipient)source;
		misread = (r.getMisreadProb() > r.random.nextFloat() ? true : false);
		
		setEavesdropped();
	}
	
	/**
	 * Gets the channel from this read event
	 * @return
	 */
	public DirectedChannel getChannel() {
		return readChannel;
	}
	
	/*
	 * the channel
	 */
	protected DirectedChannel readChannel;
	
	/*
	 * Sets whether this Event is eavesdropped or not
	 * implemented by subclass...
	 */
	protected abstract void setEavesdropped();
	
	/*
	 * Is this event eavesdropped
	 */
	public boolean isEavesdropped() {
		return eavesdropped;
	}
	
	/*
	 * output whether this event is misread or not
	 */
	public boolean isMisread() {
		return misread;
	}
	
	protected boolean eavesdropped;
	protected boolean misread;
	
	public abstract String getEventType();
	
	/*
	 * gets eavsdropped offset in sec
	 */
	public abstract long getEavesdroppedOffset();
	
}
