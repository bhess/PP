package simulation.entities;

import java.util.Calendar;

import simulation.Product;
import simulation.observer.Eavesdropper;



/**
 * @author bhess
 * 
 * Objects of this class represent a manufacturer entity
 * 
 * This means a partner that actually produces the tags,
 * but no other entity ships goods to a manufacturer:
 *  in-degree=0
 *
 */
public class Manufacturer extends Distributor {
	
	/**
	 * Constructor for a counterfeiter
	 * @param numberOfChannels
	 * Number of partners of this manufacturer (out-Channels)
	 * @param randSeed
	 * random seed
	 * @param misreadProb
	 * misread probability of this manufacturer
	 * @param eaveOUT
	 * eavesdropping rate
	 * @param Pr
	 * Production rate (items per day)
	 * @param Pt
	 * Production time in seconds
	 * @param reuseID
	 * ReuseID rate (is 1 for a fully counterfeiter)
	 */
	public void init(String name, int numberOfChannels, long randSeed, float misreadProb, int Pr, Calendar prodStart, long Pt, float reuseID) {
		super.init(name, numberOfChannels, randSeed, misreadProb);
		this.reuseID = reuseID;
		this.productionRate = Pr;
		this.productionTime = Pt;
		this.productionStart = prodStart;
		this.productionEnd = (Calendar)prodStart.clone();
		productionEnd.add(Calendar.SECOND, (int)(Pt));
	}
	
	/**
	 * Constructor for a honest manufacturer
	 * @param numberOfChannels
	 * @param randSeed
	 * @param misreadProb
	 * @param eaveOUT
	 * @param Pr
	 * @param Pt
	 */
	public void init(String name, int numberOfChannels, long randSeed, float misreadProb, float eaveOUT, int Pr, Calendar prodStart, long Pt) {
		init(name, numberOfChannels, randSeed, misreadProb, Pr, prodStart, Pt, 0.0f);
	}
	
	/**
	 * sets a spy where the fake counterfeiter can get its cloned IDs from
	 * @param e
	 */
	public void setSpy(Eavesdropper e) {
		this.spy = e;
	}
	/**
	 * Produces goods according to `productionRate` until
	 * `productionEnd`
	 * 
	 * if the manufacturer is a counterfeiter, the IDs are reused
	 * 
	 */
	public int produce(int startID, Calendar startDate) {
		int serialID = startID;
		int delaySec = 86400 / productionRate;
		Calendar newDate = (Calendar)startDate.clone();

		while(true) {
			if (newDate.compareTo(productionEnd) > 0) break;
			Product p = newProduct(serialID, newDate);
			if (p != null) {
				productQueue.add(newProduct(serialID, newDate));
				++serialID;
			}
			newDate = (Calendar)newDate.clone();
			newDate.add(Calendar.SECOND, delaySec);
		}
		return serialID;
	}
	

	public Product newProduct(int ID, Calendar cal) {
		if (reuseID == 0.0f) {
			return new Product(ID, cal, false);
		} else if (reuseID == 1.0f) {
			int rid = spy.reusedID(cal);
			return new Product((rid == -1 ? ID : rid), cal, (rid == -1 ? false : true));
		} else {
			if (random.nextFloat() > reuseID) {
				return new Product(ID, cal, false);
			} else {
				int rid = spy.reusedID(cal);
				if (rid == -1) return null;
				else {
					return new Product(rid, cal, true);
				}
			}
		}
	}
	/**
	 * Production rate as an absolute value per day
	 */
	public int productionRate;
	
	/**
	 * Date where the production ends,
	 * 	null if no production-end
	 */
	public Calendar productionEnd;
	
	/*
	 * Production start for manufacturer
	 */
	public Calendar productionStart;
	
	/*
	 * returns the production time in seconds
	 */
	public long productionTime;
	
	/**
	 * Percentage of counterfeits produced from the production
	 * 
	 * special cases: 0 -> no counterfeits
	 *                1 -> only counterfeits
	 */
	public float reuseID;
	
	protected Eavesdropper spy;


	/* (non-Javadoc)
	 * @see simulation.entities.Partner#getType()
	 */
	public int getType() {
		// TODO Auto-generated method stub
		return MANUFACTURER;
	}

}
