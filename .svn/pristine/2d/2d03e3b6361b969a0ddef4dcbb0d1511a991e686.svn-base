/**
 * 
 */
package clonedetection.classification;

import clonedetection.results.Results;


/**
 * @author bhess
 *
 * Classifies genuine and clone using a simple threshold ratio test
 * This means that the percentage of allowed failed rule checks is
 * varied by a threshold. (threshold 0 means no failes allowed,
 * threshold 1 means all rules are allowed to fail.)
 */
public class ThresholdRatioResults implements CloneClassification {

	private static final String TYPE = "ThresholdRatio";

	/*
	 * Detects clones given a threshold \in [0,1]
	 * 0: no wrong verified rule
	 * 1: all verified rules can be wrong
	 */
	public double isClone(float pmr, Results result) {
		boolean[] results = result.getCheckedResults().results;
		int good = 0;
		
		for (int i = 0; i < results.length; i++) {
			if (results[i]) {
				good++;
			}
		}
		
		double res = 1d - ((double)good / (double)results.length);
		if (res < min) min = res;
		if (res > max) max = res;
		return res;
	}
	
	double min = Double.MAX_VALUE, max = Double.MIN_VALUE;
	
	/*
	 * (non-Javadoc)
	 * @see clonedetection.classification.CloneClassification#isClone(double, double)
	 */
	public boolean isClone(double threshold, double isClone) {
		return threshold <= isClone;
	}


	/* (non-Javadoc)
	 * @see clonedetection.CloneClassification#getName()
	 */
	@Override
	public String getName() {
		return TYPE;
	}

	/*
	 * (non-Javadoc)
	 * @see clonedetection.classification.CloneClassification#getMaxThreshold()
	 */
	@Override
	public double getMaxThreshold() {
		return max;
	}

	/*
	 * (non-Javadoc)
	 * @see clonedetection.classification.CloneClassification#getMinThreshold()
	 */
	@Override
	public double getMinThreshold() {
		return min;
	}

	/* (non-Javadoc)
	 * @see clonedetection.classification.CloneClassification#getMode()
	 */
	@Override
	public int getMode() {
		return LESS_OR_EQUAL;
	}

}
