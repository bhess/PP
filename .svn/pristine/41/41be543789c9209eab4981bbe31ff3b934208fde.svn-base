package evaluation;

import java.io.IOException;

import simulation.utilities.Logging;
import clonedetection.CloneDetector;
import clonedetection.CloneDetectorImpl;
import clonedetection.CloneDetector.CloneDetectionMetrics;
import clonedetection.classification.BayesianFactor;
import clonedetection.classification.BinomialTestResults;
import clonedetection.classification.CloneClassification;
import clonedetection.classification.DependentBinomialTest;
import clonedetection.classification.EvidenceCollectionTest;
import clonedetection.classification.EvidenceWeightedBayesianFactor;
import clonedetection.classification.EvidenceWeightedBinomialTest;
import clonedetection.classification.EvidenceWeightedLikelihoodRatio;
import clonedetection.classification.LikelikoodRatioResults;
import clonedetection.classification.SerializableRawResults;
import clonedetection.classification.ThresholdRatioResults;

/**
 * @author bhess
 * 
 * Class used to produce plot data from simulation results
 *
 */
public class PlotDataProducer {
	
	/**
	 * The number of metrics for the plots
	 */
	public static final int NUMBER_OF_METRICS = 9;
	
	/**
	 * Initializing with some raw data
	 * @throws IOException 
	 */
	public PlotDataProducer(SerializableRawResults results, int thread) throws IOException {
		this.results = results;
		for (CloneClassification c : classifiers) {
			produce(c, init(c), thread);
		}
		//init();
		//produce(thread);
	}
	
	/**
	 * The classifiers used for evaluations
	 */
	private CloneClassification[] classifiers = {
			new ThresholdRatioResults(),
			new BinomialTestResults(),
			new LikelikoodRatioResults(),
			new BayesianFactor(),
			new DependentBinomialTest(),
			new EvidenceCollectionTest(),
			new EvidenceWeightedBinomialTest(),
			new EvidenceWeightedBayesianFactor(),
			new EvidenceWeightedLikelihoodRatio()
	};
	
	/*
	 * initialized the polot production,
	 * this means doing the clone detection on all repetitions
	 * and averaging them out
	 */
	private double[][] init(CloneClassification classifier) {
		int repetitions = results.repetitions;
		
		CloneDetector cd = new CloneDetectorImpl(classifier);
		cd.analyzeDetection(results.cloneResults, results.pMisread);
		CloneDetectionMetrics[][] cdms = cd.getMetrics();
		//NegativesMetrics nms = cd.getNegativeMetrics();

		double[][] da = new double[CloneDetector.STEP + 1][NUMBER_OF_METRICS];

		for (int i = 0; i < CloneDetector.STEP + 1; ++i) {

			// the first 'metric' is the threshold -> do not average
			da[i][0] = cdms[0][i].getTreshold();
			for (int j = 0; j < repetitions; ++j) {
				CloneDetectionMetrics cdm = cdms[j][i];
				// sum metric for each repetition up
				da[i][1] += cdm.getFpr();
				da[i][2] += cdm.getFnr();
				da[i][3] += cdm.getPower();
				da[i][4] += cdm.getPpv();
				da[i][5] += cdm.getAccuracy();
				da[i][6] += cdm.getPercOfFNRDueMisread();
				da[i][7] += cdm.getPercOfFNRDuePF();
				da[i][8] += cdm.getPercOfFNRDueBoth();
			}

			// averaging over the repetitions
			for (int j = 1; j < NUMBER_OF_METRICS; ++j) {
				da[i][j] /= (double) repetitions;
			}

		}

		return da;
		
	}
	
	/**
	 * Hash map indexing with the used classifier
	 * 
	 * contains each threshold and the metrics
	 */
	//private HashMap<CloneClassification, double[][]> data = 
		//new HashMap<CloneClassification, double[][]>(classifiers.length);
		
	private SerializableRawResults results;

	/**
	 * Producing the plots using the default thread
	 * @throws IOException
	 
	public void produce() throws IOException {
		produce(0);
	}
	 */
	
	/**
	 * Producing the plots using a specified thread
	 * @param thread
	 * Thread where the production should run at (<NUM_THREADS)
	 * @throws IOException
	 */
	public void produce(CloneClassification c, double[][] da, int thread) throws IOException {

		String n = results.configurationName;
		int col = NUMBER_OF_METRICS;

		//for (CloneClassification c : classifiers) {
			String name = n + c.getName();
			//double[][] da = data.get(c);
        	
			DATWriter dw = new DATWriter(name, col);
        
			// sets properties from output analysis to dat-writer
			dw.set(results.avgEvents, results.avgHops, results.avgTimeInSC);
        	
        	// write each step...
			for (int i = 0; i < da.length; ++i) {
				dw.writeEntry(da[i]);
			}
			dw.finalize();
			dw.writeGnuplotConfig();
    	
			Logging.log.info(name + ".dat written!");

		//}
    	
	}
}
