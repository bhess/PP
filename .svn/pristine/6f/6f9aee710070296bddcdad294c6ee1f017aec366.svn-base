package clonedetection.classification;

import simulation.utilities.Binomial;
import simulation.utilities.BinomialFunction;
import clonedetection.results.Results;

/**
 * 
 * @author bhess
 * 
 * Clone Classification using Bayes Factor
 * 
 * http://en.wikipedia.org/wiki/Bayes_factor
 *
 */
public class BayesianFactor implements CloneClassification {

	private static String TYPE = "BayesianFactor";
		
	@Override
	public String getName() {
		return TYPE;
	}

	/**
	 * outputs, at which threshold the result is classified as a clone.
	 */
	@Override
	public double isClone(float pmr, Results result) {
		//boolean[] res = new boolean[threshold.length];
		boolean[] results = result.getCheckedResults().results;
		int failed = 0;
		for (int i = 0; i < results.length; ++i) {
			if (!results[i]) {
				failed++;
			}
		}
		int originalTraceLength = result.trace.length + failed;
		double numerator = new Binomial(originalTraceLength, pmr).getProb(failed);
		double denominator = BinomialFunction.integrate(originalTraceLength, 
				failed, 0, 1);
		//double numerator = BinomialFunction.integrate(originalTraceLength,
		//		failed, 0, pmr);
		//double denominator = BinomialFunction.integrate(originalTraceLength,
		//		failed, pmr, 1);
		double factor = Math.log10(numerator / denominator);
		if (factor < min) min = factor;
		if (factor > max) max = factor;
		return factor;
	}
	
	public double min = Double.MAX_VALUE, max = Double.MIN_VALUE;

	@Override
	public double getMaxThreshold() {
		return max;
	}

	@Override
	public double getMinThreshold() {
		return min;
	}
	
	public int getMode() {
		return GREATER_OR_EQUAL;
	}

	/* (non-Javadoc)
	 * @see clonedetection.classification.CloneClassification#isClone(double, double)
	 */
	@Override
	public boolean isClone(double threshold, double isClone) {
		return threshold >= isClone;
	}

}
