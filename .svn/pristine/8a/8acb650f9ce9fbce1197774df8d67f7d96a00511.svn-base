package userinterface;
/*
 * 
 * License from a template which is originally taken for this
 * 
 * Copyright (c) 1995 - 2008 Sun Microsystems, Inc.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *   - Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *
 *   - Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in the
 *     documentation and/or other materials provided with the distribution.
 *
 *   - Neither the name of Sun Microsystems nor the names of its
 *     contributors may be used to endorse or promote products derived
 *     from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
 * IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */ 


import java.awt.*;
import java.awt.event.*;
import java.io.File;

import javax.swing.*;

public class SimpleGUI extends JPanel
                             implements ActionListener,
                             SimulationView {

    

	private SimulationController controller;
	
	private static final long serialVersionUID = -4970253410045398035L;
	private JProgressBar[] progressBar;
	private JProgressBar totalProgressBar;
    private JButton openButton, startButton, plotButton;
    private JTextArea[] taskOutput;
    private JFileChooser fileChooser;

    public SimpleGUI(SimulationController controller) {    	
        super(new BorderLayout());
        
    	this.controller = controller;

        int num_threads = controller.getNumThreads();
        //Create the demo's UI.
        fileChooser = new JFileChooser(".");
        fileChooser.setMultiSelectionEnabled(true);
        
        openButton = new JButton("Select files");
        openButton.addActionListener(this);
        
        startButton = new JButton("Start");
        startButton.setActionCommand("start");
        startButton.addActionListener(this);
        startButton.setEnabled(false);

        progressBar = new JProgressBar[num_threads];
        taskOutput = new JTextArea[num_threads];
        

        for (int i = 0; i < num_threads; ++i) {
        	progressBar[i] = new JProgressBar();
        	progressBar[i].setValue(0);
        	progressBar[i].setStringPainted(true);
        	
        	taskOutput[i] = new JTextArea(5, 20);
        	taskOutput[i].setMargin(new Insets(5,5,5,5));
        	taskOutput[i].setEditable(false);
        }

        plotButton = new JButton("Clone Detection");
        plotButton.addActionListener(this);
        plotButton.setEnabled(true);
        
        JPanel panel = new JPanel();
        panel.add(openButton);
        panel.add(startButton);
        panel.add(plotButton);

        add(panel, BorderLayout.PAGE_START);
        
        JTabbedPane tabbedPane = new JTabbedPane();
        
        for (int i = 0; i < num_threads; ++i) {
        	JPanel p = new JPanel();
        	p.setLayout(new BoxLayout(p, BoxLayout.PAGE_AXIS));
        	p.add(progressBar[i]);
        	p.add(new JScrollPane(taskOutput[i]));
        	
        	tabbedPane.addTab("Thread" + (i+1), p);
        	/*
        	panel.add(progressBar[i]);
        	add(new JScrollPane(taskOutput[i]), BorderLayout.CENTER);
        	*/
        }
        
        JPanel bottomPanel = new JPanel();
        totalProgressBar = new JProgressBar();
        totalProgressBar.setValue(0);
        totalProgressBar.setName("total progeess");
        totalProgressBar.setToolTipText("Total Progress");
        totalProgressBar.setStringPainted(true);
        bottomPanel.add(totalProgressBar);
        
        add(tabbedPane, BorderLayout.CENTER);
        add(bottomPanel, BorderLayout.PAGE_END);
        setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
    }
    
    public void start() {}
    
    /**
     * Invoked when the user presses the start button.
     */
    public void actionPerformed(ActionEvent evt) {
    	if (evt.getSource() == openButton) {
    		// Open button was hitted -> show opendialog
            int returnVal = fileChooser.showOpenDialog(SimpleGUI.this);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
            	// Send the selected files to the controller
            	File [] selectedFiles = fileChooser.getSelectedFiles();
            	controller.setFiles(selectedFiles, true, false);
            	
                for (File f : selectedFiles) {
                	taskOutput[0].append(f.getName() + " selected\n");
                }
                startButton.setEnabled(true);
                //openButton.setEnabled(false);
            }
    	} else if (evt.getSource() == startButton) {
    		int repetitions = controller.getNumRepetitions();
    	
    		startButton.setEnabled(false);
    		plotButton.setEnabled(false);
    		fileChooser.setEnabled(false);
    		setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
    		
    		taskOutput[0].append(repetitions + " repetitions per simulation...\n");
    		
    		// sets the settings for the total progress
    		totalProgressBar.setMinimum(0);
    		totalProgressBar.setMaximum(controller.getNumConfigurations() * controller.getNumRepetitions());
    		totalProgressBar.setValue(0);
    		
    		controller.startSimulations();
    		
    	} else if (evt.getSource() == plotButton) {

    		// deprecated...
    		// TODO: improve..
    		//controller.plotData(null);
			plotButton.setEnabled(true);
			openButton.setEnabled(true);
    	}
    }
    
    public static SimpleGUI getInstance(SimulationController sc) {
    	final SimpleGUI simpleGui = new SimpleGUI(sc);
        javax.swing.SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                createAndShowGUI(simpleGui);
            }
        });
        return simpleGui;
    }

    /**
     * Create the GUI and show it. As with all GUI code, this must run
     * on the event-dispatching thread.
     */
    private static void createAndShowGUI(SimpleGUI sg) {
        //Create and set up the window.
        JFrame frame = new JFrame("Simulator");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        //Create and set up the content pane.
        //JComponent newContentPane = new SimpleGUI();
        sg.setOpaque(true); //content panes must be opaque
        frame.setContentPane(sg);

        //Display the window.
        frame.pack();
        frame.setVisible(true);
        
    }

	/* (non-Javadoc)
	 * @see userinterface.SimulationView#notifySimulationDone()
	 */
	public void notifySimulationsDone() {
		plotButton.setEnabled(true);
		fileChooser.setEnabled(true);
		setCursor(null);
	}
	
	public void notifyDetectionsDone() {}

	/* (non-Javadoc)
	 * @see userinterface.SimulationView#log(java.lang.String)
	 */
	public void log(String info) {
		log(info, 0);
	}

	/* (non-Javadoc)
	 * @see userinterface.SimulationView#log(java.lang.String, int)
	 */
	public void log(String info, int thread) {
		taskOutput[thread].append(info);
	}

	/* (non-Javadoc)
	 * @see userinterface.SimulationView#setTotalProgress(int)
	 */
	public void setTotalProgress(int progress) {
		totalProgressBar.setValue(progress);
	}

	/* (non-Javadoc)
	 * @see userinterface.SimulationView#setProgress(int, int)
	 */
	public void setProgress(int progress, int thread) {
		progressBar[thread].setValue(progress);
	}

	/* (non-Javadoc)
	 * @see userinterface.SimulationView#setMinMaxProgress(int, int, int)
	 */
	public void setMinMaxProgress(int min, int max, int thread) {
		progressBar[thread].setMinimum(min);
		progressBar[thread].setMaximum(max);
		
	}

	/* (non-Javadoc)
	 * @see userinterface.SimulationView#detectionStarted()
	 */
	public void notifyDetectionStarted() {}

	@Override
	public void notifySimulationsStarted() {}

}