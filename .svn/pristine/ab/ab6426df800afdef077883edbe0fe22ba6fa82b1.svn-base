package clonedetection.results;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;

/**
 * @author bhess
 * 
 * Class that contains all information by one simulation
 * it is iterable to obtains the individual 'Results' which are
 * information about the individual tags of a simulation
 */
public class CloneResults implements Iterable<Results>, Serializable {

	private static final long serialVersionUID = -4789111861021063005L;

	/**
	 * Adding a tag result to the whole set.
	 * The result is only added when the corresponding 'id'
	 * doesn't already exist.
	 * 
	 * @param id
	 * ID of the tag
	 * @param res
	 * the trace of the corresponding tag
	 */
	public void put(int id, Results res) {
		if (results.containsKey(id)) return;
		
		this.index.add(id);
		this.results.put(id, res);
		this.size++;
	}
	
	/**
	 * Gets one result trace using the index for the internal
	 * representation of tag id's
	 * @param index
	 * Index of internal representation for tag ID
	 * @return
	 * the resulting trace result
	 */
	private Results get(int index) {
		return results.get(this.index.get(index));
	}
	
	/**
	 * Gets one result using its tag id
	 * @param index
	 * Tag ID
	 * @return
	 * the resulting trace result
	 */
	public Results getByID(int index) {
		return results.get(index);
	}
	
	/*
	 * Returns the number of tag traces that this result set contains
	 */
	public int size() {
		return size;
	}
	
	/*
	 * Index for the tag ID's
	 */
	private ArrayList<Integer> index = new ArrayList<Integer>();
	
	/*
	 * Hashmap index for the result traces
	 * index is the corresponding Tag ID
	 */
	private HashMap<Integer, Results> results = new HashMap<Integer, Results>();
	
	/*
	 * The number of negatives (Genuine) that this result set
	 * contains
	 */
	public int negs;
	
	/*
	 * A list of all tag IDs that contain cloned traces
	 */
	public List<Integer> realClones;
	
	/*
	 * internal representation of the number of tags
	 */
	private int size = 0;
	

	/* 
	 * Returns an iterator for this result set
	 */
	public Iterator<Results> iterator() {
		return new CRIterator(this);
	}
	
	/*
	public void consistencyCheck() {
		for (int i : index) {
			if (results.get(i) == null) {
				System.out.println(i + " is null");
				System.out.println(index.contains(30144));
			}
		}
	}
	*/
	
	/**
	 * 
	 * @author bhess
	 * 
	 * Inner class representing an iterator for the clone result set
	 *
	 */
	protected class CRIterator implements Iterator<Results> {

		/**
		 * initializing with some clone result set
		 * @param cr
		 * The clone result set
		 */
		public CRIterator(CloneResults cr) {
			this.cr = cr;
		}
		
		CloneResults cr;
		
		/*
		 * the original position is -1
		 */
		int pos = -1;
		
		/* (non-Javadoc)
		 * @see java.util.Iterator#hasNext()
		 */
		public boolean hasNext() {
			return pos < cr.size - 1;
		}

		/* (non-Javadoc)
		 * @see java.util.Iterator#next()
		 */
		public Results next() {
			if (!hasNext()) return null;
			++pos;
			return cr.get(pos);
		}

		/* (non-Javadoc)
		 * @see java.util.Iterator#remove()
		 * Method stub... not functional
		 */
		public void remove() {}
		
	}
}
