package clonedetection.classification;

import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.Serializable;
import java.util.zip.GZIPInputStream;
import java.util.zip.GZIPOutputStream;

import clonedetection.results.CloneResults;
import clonedetection.results.Results;

/**
 * @author bhess
 * 
 * This data type represents the Results from a number of simulations
 * use this objects to use different implementations of the clone detection
 *
 */
public class SerializableRawResults implements Serializable {

	private static final long serialVersionUID = -1366804175410811466L;
	
	/*
	 * initializes the object with number of repetitions and the name
	 */
	public SerializableRawResults(int repetions, String configurationName) {
		this.repetitions = repetions;
		this.configurationName = configurationName;
		cloneResults = new CloneResults[repetions];
	}

	/*
	 * the name of the underlying configuration of the
	 * simulation
	 */
	public String configurationName;
	
	/*
	 * the number of repetitions for this simulation
	 */
	public int repetitions;
	
	/*
	 * The misread probability Pmr of this simulation
	 */
	public float pMisread;
	
	/*
	 * array of clone results
	 * each array entry should correspond to one
	 * repetition of the simulation
	 */
	public CloneResults[] cloneResults;

	
	public double avgEvents, avgHops, avgTimeInSC;
	

	/**
	 * Serializes this SerializableRawResults-Object and writes it to an output stream.
	 * you can give for example the socket outputstream as argument
	 * @param out
	 * @throws FileNotFoundException
	 * @throws IOException Can't write to output stream
	 */
	public void serialize(OutputStream out) throws IOException {
		GZIPOutputStream gzOut = new GZIPOutputStream(out);
		ObjectOutputStream objOut = new ObjectOutputStream(gzOut);
		objOut.writeObject(this);
		objOut.flush();
		objOut.close();
	}
	
	/**
	 * Generates a SerializableRawResilts object from an input stream
	 * Usage: SerializableRawResilts fancyMsg = SerializableRawResilts.deserialize(in)
	 * @param in
	 * @return a SerializableRawResilts
	 * @throws IOException Can't read Input Stream
	 * 
	 * TODO: evaluate performance without compression or first decompress
	 *  and the deserialize...
	 */
	public static SerializableRawResults deserialize(InputStream in) throws IOException {
		try {
			GZIPInputStream gzIn = new GZIPInputStream(in);
			ObjectInputStream objIn = new ObjectInputStream(gzIn);
			SerializableRawResults s = (SerializableRawResults) objIn.readObject();
			objIn.close();
			/*
			CloneResults cr = s.cloneResults[0];
			for (Results r : cr) {
				if (r.clone)
				System.out.println(r.id + ": misread: " + r.cloneMisread + ", pf: " 
						+ r.clonePerfectFit + ", both:" + r.clonePerfectFitAndMisread 
						+ ", overhang: " + r.overhang + ", totclone: " + r.cloneTotalLength
						+ ", pf(without clone)" + r.clonePerfectFitWithoutMisread);
			}
			*/
			
			return s;
		} catch (IOException e) {
			System.err.println(e.getMessage());
			return null;
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
			System.out.println("hasdasd");
			return null;
		}
	}

}
